Take a look at the below snipper from the gitlab changelog documentation :-

Customize the changelog output
To customize the changelog output, edit the changelog configuration file, and commit these changes to your project’s Git repository. The default location for this configuration is .gitlab/changelog_config.yml. The file supports these variables:

date_format: The date format, in strftime format, used in the title of the newly added changelog data.
template: A custom template to use when generating the changelog data.
include_groups: A list of group full paths containing users whose contributions should be credited regardless of project membership. The user generating the changelog must have access to each group for credit to be given.
categories: A hash that maps raw category names to the names to use in the changelog. To alter the names displayed in the changelog, add these lines to your configuration file and edit them to meet your needs. This example renders the category titles as ### Features, ### Bug fixes, and ### Performance improvements:

---
categories:
  feature: Features
  bug: Bug fixes
  performance: Performance improvements

Custom templates
History 
Category sections are generated using a template. The default template:

{% if categories %}
{% each categories %}
### {{ title }} ({% if single_change %}1 change{% else %}{{ count }} changes{% end %})

{% each entries %}
- [{{ title }}]({{ commit.web_url }})\
{% if author.credit %} by {{ author.reference }}{% end %}\
{% if merge_request %} ([merge request]({{ merge_request.web_url }})){% end %}

{% end %}

{% end %}
{% else %}
No changes.
{% end %}

The {% ... %} tags are for statements, and {{ ... }} is used for printing data. Statements must be terminated using a {% end %} tag. Both the if and each statements require a single argument.

For example, for a variable called valid, you can display “yes” when this value is true, and display “nope” otherwise by doing the following:

{% if valid %}
yes
{% else %}
nope
{% end %}

The use of else is optional. A value is considered true when it’s a non-empty value or boolean true. Empty arrays and hashes are considered false.

Looping is done using each, and variables inside a loop are scoped to it. Referring to the current value in a loop is done using the variable tag {{ it }}. Other variables read their value from the current loop value. Take this template for example:

{% each users %}
{{name}}
{% end %}

Assuming users is an array of objects, each with a name field, this would then print the name of every user.

Using variable tags, you can access nested objects. For example, {{ users.0.name }} prints the name of the first user in the users variable.

If a line ends in a backslash, the next newline is ignored. This allows you to wrap code across multiple lines, without introducing unnecessary newlines in the Markdown output.

Tags that use {% and %} (known as expression tags) consume the newline that directly follows them, if any. This means that this:

---
{% if foo %}
bar
{% end %}
---

Compiles into this:

---
bar
---

Instead of this:

---

bar

---

You can specify a custom template in your configuration, like this:

---
template: |
  {% if categories %}
  {% each categories %}
  ### {{ title }}

  {% each entries %}
  - [{{ title }}]({{ commit.web_url }})\
  {% if author.credit %} by {{ author.reference }}{% end %}

  {% end %}

  {% end %}
  {% else %}
  No changes.
  {% end %}

When specifying the template you should use template: | and not template: >, as the latter doesn’t preserve newlines in the template.

Template data
History 
At the top level, the following variable is available:

categories: an array of objects, one for every changelog category.
In a category, the following variables are available:

count: the number of entries in this category.
entries: the entries that belong to this category.
single_change: a boolean that indicates if there is only one change (true), or multiple changes (false).
title: the title of the category (after it has been remapped).
In an entry, the following variables are available (here foo.bar means that bar is a sub-field of foo):

author.contributor: a boolean set to true when the author is not a project member, otherwise false.
author.credit: a boolean set to true when author.contributor is true or when include_groups is configured, and the author is a member of one of the groups.
author.reference: a reference to the commit author (for example, @alice).
commit.reference: a reference to the commit, for example, gitlab-org/gitlab@0a4cdd86ab31748ba6dac0f69a8653f206e5cfc7.
commit.web_url: a URL to the commit, for example, https://gitlab.com/gitlab-org/gitlab/-/commit/0a4cdd86ab31748ba6dac0f69a8653f206e5cfc7.
commit.trailers: an object containing all the Git trailers that were present in the commit body.

These trailers can be referenced using commit.trailers.<name>. For example, assuming the following commit:

Add some impressive new feature

Changelog: added
Issue: https://gitlab.com/gitlab-org/gitlab/-/issues/1234
Status: important

The Changelog, Issue and Status trailers can be accessed in the template as follows:

{% each entries %}
{% if commit.trailers.Issue %} ([link to issue]({{ commit.trailers.Issue }})){% end %}
{% if commit.trailers.Status %}Status: {{ commit.trailers.Status }}{% end %}
{% end %}

merge_request.reference: a reference to the merge request that first introduced the change (for example, gitlab-org/gitlab!50063).
merge_request.web_url: a URL to the merge request that first introduced the change (for example, https://gitlab.com/gitlab-org/gitlab/-/merge_requests/50063).
title: the title of the changelog entry (this is the commit title).
The author and merge_request objects might not be present if the data couldn’t be determined. For example, when a commit is created without a corresponding merge request, no merge request is displayed.

-End of snippet

At the moment only the commit title is visible in the changelog file. For example is my commit message is something like this:-

Update git vendor to gitlab

Now that we are using gitaly to compile git, the git version isn't known
from the manifest, instead we are getting the gitaly version. Update our
vendor field to be `gitlab` to avoid cve matching old versions.

Changelog: changed


only "Update git vendor to gitlab" will be visible in the changelog file and not the commit body.

Here is the syntax of the commit message:
<Commit message subject>

<Commit message description>

Changelog: feature


I want the commit body or the commit message description to be part of the result as well. What changes do I make to my configuration file?
